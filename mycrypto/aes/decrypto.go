package aes


var sBoxInv = [256]byte{
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d, 
};


// 逆字节代换
func subBytesInv(state [][]byte){
    for i := 0; i < 4; i++ {
        for j := 0; j < 4; j++ {
            state[i][j] = sBoxInv[state[i][j]]
        }
    }
}


func shiftRowsInv(state [][]byte){
    var tempByte byte;
    
    tempByte    = state[1][3]
    state[1][3] = state[1][2]
    state[1][2] = state[1][1]
    state[1][1] = state[1][0]
    state[1][0] = tempByte

    tempByte    = state[2][0]
    state[2][0] = state[2][2]
    state[2][2] = tempByte

    tempByte    = state[2][1]
    state[2][1] = state[2][3]
    state[2][3] = tempByte

    tempByte    = state[3][0]
    state[3][0] = state[3][1]
    state[3][1] = state[3][2]
    state[3][2] = state[3][3]
    state[3][3] = tempByte
}


func multiply(x byte, y byte) byte {
	return  ((y & 0x01) * x) ^ 
            ((y >> 1 & 0x01) * xtime(x)) ^ 
            ((y >> 2 & 0x01) * xtime(xtime(x))) ^ 
            ((y >> 3 & 0x01) * xtime(xtime(xtime(x)))) ^ 
            ((y >> 4 & 0x01) * xtime(xtime(xtime(xtime(x)))))
}


func mixColumnsInv(state [][]byte) {
    var d0, d1, d2, d3 byte
    for i := 0; i < 4; i++ {

        d0 = state[0][i]
        d1 = state[1][i]
        d2 = state[2][i]
        d3 = state[3][i]

        state[0][i] = multiply(d0, 0x0e) ^ multiply(d1, 0x0b) ^ 
                      multiply(d2, 0x0d) ^ multiply(d3, 0x09)
        state[1][i] = multiply(d0, 0x09) ^ multiply(d1, 0x0e) ^ 
                      multiply(d2, 0x0b) ^ multiply(d3, 0x0d)
        state[2][i] = multiply(d0, 0x0d) ^ multiply(d1, 0x09) ^ 
                      multiply(d2, 0x0e) ^ multiply(d3, 0x0b)
        state[3][i] = multiply(d0, 0x0b) ^ multiply(d1, 0x0d) ^ 
                      multiply(d2, 0x09) ^ multiply(d3, 0x0e)
    }
}


func decryptoBlock(in []byte, roundKey []byte, nr int, out []byte) {
    var round int

    state := make([][]byte, 4)
    for i := range state {
        state[i] = make([]byte, 4)
    }

    for i := 0; i < 4; i++ {
        for j := 0; j < 4; j++ {
            state[j][i] = in[i * 4 + j]
        }
    }

    
    // round Nr : add round key, 第Nr回合: 僅執行-key XOR block - key使用
    addRoundKey(nr, state, roundKey);

    // Round Nr-1 ~ 1, 反覆執行 1 ~ Nr-1回合
    for round = nr - 1; round > 0; round-- {
        shiftRowsInv(state);
        subBytesInv(state);
        addRoundKey(round, state, roundKey);
        mixColumnsInv(state);
    }

    // Round Nr, no MixColumns(), 第 Nr 回合 沒有混合行運算
    shiftRowsInv(state);
    subBytesInv(state);
    addRoundKey(0, state, roundKey);

    /**
     *  將state[] transform 到 out[]上
     *  圖示:
     *   [b0 b4 b8  b12
     *    b1 b5 b9  b13    --> [b0 b1 b2 ... b15]
     *    b2 b6 b10 b14
     *    b3 b7 b11 b15]
     */
    for i := 0; i < 4; i++ {
        for j := 0; j < 4; j++ {
            out[i * 4 + j]=state[j][i]
        }
    } 
}


// 对外接口
func Decrypto(cipher []byte, key []byte) []byte {

    ret := make([]byte, 0)
    roundKey := make([]byte, 240)
    keySizeInBit := len(key) * 8
    nbK := keySizeInBit / 32;
    nr   := nbK + 6;

    keyExpansion(key, roundKey, nbK, nr)

    out := make([]byte, 16)

    for i := 0; i < len(cipher); i += 16 {
        decryptoBlock(cipher[i:i+16], roundKey, nr, out)
        for i := 0; i < 16; i++ {
            ret = append(ret, out[i])
        }
    }
    return ret
}

